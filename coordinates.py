import numpy as np
from shapely.geometry.linestring import LineString


class Coords:
    x_adrs_input = np.array(
        [
            0,
            0.130494775,
            0.1364796,
            0.143405096,
            0.150536079,
            0.157875776,
            0.165426095,
            0.174943653,
            0.183875392,
            0.194012145,
            0.205447253,
            0.217281279,
            0.230558406,
            0.244317311,
            0.260800793,
            0.277945926,
            0.29576355,
            0.316783458,
            0.340013545,
            0.365642018,
            0.393872338,
            0.426439547,
            0.443327077,
            0.46221828,
            0.481600685,
            0.501480983,
            0.523586925,
            0.548062868,
            0.573239739,
            0.599127662,
            0.627664549,
            0.659027765,
            0.691355177,
            0.726776772,
            0.765504927,
            0.807767702,
            0.851473541,
            0.899061813,
            0.950805743,
            1.006997167,
            1.070649927,
            1.136798911,
            1.193866237,
            1.252722658,
            1.313399143,
            1.407876385,
            1.473205887,
            1.574787405,
            1.644936547,
            1.753863417,
            1.867309405,
            1.98536845,
            2.108123764,
            2.27925128,
            2.413301764,
            2.59980414,
            2.795374772,
            3.000219232,
            3.269633605,
            3.496096024,
            3.793177378,
            4.103694409,
            4.353103209,
            4.714635611,
            5.035997746,
            5.424310326,
            5.885753392,
            6.123537829,
            6.366030869,
            6.675768641,
            6.928856037,
            7.251836754,
            7.582174663,
            7.988291647,
            8.334815378,
            8.760355348,
            9.196489675,
            9.643218357,
            10.17779191,
            10.72678556,
            11.37186413,
            12.03577711,
            12.7185245,
            13.50912833,
            14.32356945,
            15.35136914,
            16.3166327,
            17.51379494,
            18.7533346,
            20.14399098,
            21.81039491,
            23.54301357,
            25.58669429,
            27.84329214,
            30.4624524,
            33.33926151,
            35.86822388,
            37.73332083,
            39.88546109,
            42.18099973,
            44.83526044,
            47.84821032,
            51.21974815,
            55.16521544,
            59.7564467,
            65.20833415,
            71.73644776,
            75.3231919,
            79.62730813,
            84.64876801,
            89.67032683,
            95.40942266,
            102.5831523,
            110.4741219,
            119.7996438,
            130.5601993,
            143.4723987,
            159.2546163,
            173.8768745,
            173.8767745,
            173.8772046,
            173.8761914,
        ]
    )

    y_adrs_input = np.array(
        [
            0.242142,
            0.328353,
            0.330077,
            0.332017,
            0.333956,
            0.335896,
            0.337836,
            0.340207,
            0.342362,
            0.344733,
            0.347319,
            0.349905,
            0.352707,
            0.355509,
            0.358742,
            0.361975,
            0.365208,
            0.368872,
            0.372751,
            0.376846,
            0.381157,
            0.385899,
            0.388269,
            0.390856,
            0.393442,
            0.396028,
            0.39883,
            0.401848,
            0.404865,
            0.407882,
            0.411115,
            0.414564,
            0.418012,
            0.421676,
            0.425556,
            0.429651,
            0.433746,
            0.438056,
            0.442582,
            0.447324,
            0.452497,
            0.457669,
            0.46198,
            0.46629,
            0.470601,
            0.477067,
            0.481377,
            0.487843,
            0.492154,
            0.49862,
            0.505085,
            0.511551,
            0.518017,
            0.526638,
            0.533104,
            0.541725,
            0.550346,
            0.558967,
            0.569744,
            0.578365,
            0.589141,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.592393,
            0.577614,
            0.549062,
            0.519437,
            0.491168,
            0.462091,
            0.432994,
            0.404491,
            0.375561,
            0.346707,
            0.317719,
            0.288807,
            0.275054,
            0.260186,
            0.244751,
            0.231045,
            0.217148,
            0.201963,
            0.187537,
            0.172938,
            0.158685,
            0.144403,
            0.130093,
            0.112003,
            0.085581,
            0.063128,
            0.043751,
        ]
    )

    x_p_mdof = np.array(
        [
            0,
            0.0004,
            0.0008,
            0.0012,
            0.0016,
            0.002,
            0.0024,
            0.0028,
            0.0032,
            0.0036,
            0.004,
            0.0044,
            0.0048,
            0.0052,
            0.0056,
            0.006,
            0.0064,
            0.0068,
            0.0072,
            0.0076,
            0.008,
            0.0084,
            0.0088,
            0.0092,
            0.0096,
            0.01,
            0.0104,
            0.0108,
            0.0112,
            0.0116,
            0.012,
            0.0124,
            0.0128,
            0.0132,
            0.0136,
            0.014,
            0.0144,
            0.0148,
            0.0152,
            0.0156,
            0.016,
            0.0164,
            0.0168,
            0.0172,
            0.0176,
            0.018,
            0.0184,
            0.0188,
            0.0192,
            0.0196,
            0.02,
            0.0204,
            0.0208,
            0.0212,
            0.0216,
            0.022,
            0.0224,
            0.0228,
            0.0232,
            0.0236,
            0.024,
            0.0244,
            0.0248,
            0.0252,
            0.0256,
            0.026,
            0.0264,
            0.0268,
            0.0272,
            0.0276,
            0.028,
            0.0284,
            0.0288,
            0.0292,
            0.0296,
            0.03,
            0.0304,
            0.0308,
            0.0312,
            0.0316,
            0.032,
            0.0324,
            0.0328,
            0.0332,
            0.0336,
            0.034,
            0.0344,
            0.0348,
            0.0352,
            0.0356,
            0.036,
            0.0364,
            0.0368,
            0.0372,
            0.0376,
            0.038,
            0.0384,
            0.0388,
            0.0392,
            0.0396,
            0.04,
            0.0404,
            0.0408,
            0.0412,
            0.0416,
            0.042,
            0.0424,
            0.0428,
            0.0432,
            0.0436,
            0.044,
            0.0444,
            0.0448,
            0.0452,
            0.0456,
            0.046,
            0.0464,
            0.0468,
            0.0472,
            0.0476,
            0.048,
            0.0484,
            0.0488,
            0.0492,
            0.0496,
            0.05,
            0.0504,
            0.0508,
            0.0512,
            0.0516,
            0.052,
            0.0524,
            0.0528,
            0.0532,
            0.0536,
            0.054,
            0.0544,
            0.0548,
            0.0552,
            0.0556,
            0.056,
            0.0564,
            0.0568,
            0.0572,
            0.0576,
            0.058,
            0.0584,
            0.0588,
            0.0592,
            0.0596,
            0.06,
            0.0604,
            0.0608,
            0.0612,
            0.0616,
            0.062,
            0.0624,
            0.0628,
            0.0632,
            0.0636,
            0.064,
            0.0644,
            0.0648,
            0.0652,
            0.0656,
            0.066,
            0.0664,
            0.0668,
            0.0672,
            0.0676,
            0.068,
            0.0684,
            0.0688,
            0.0692,
            0.0696,
            0.07,
            0.0704,
            0.0708,
            0.0712,
            0.0716,
            0.072,
            0.0724,
            0.0728,
            0.0732,
            0.0736,
            0.074,
            0.0744,
            0.0748,
            0.0752,
            0.0756,
            0.076,
            0.0764,
            0.0768,
            0.0772,
            0.0776,
            0.078,
            0.0784,
            0.0788,
            0.0792,
            0.0796,
            0.08,
            0.0804,
            0.0808,
            0.0812,
            0.0816,
            0.082,
            0.0824,
            0.0828,
            0.0832,
            0.0836,
            0.084,
            0.0844,
            0.0848,
            0.0852,
            0.0856,
            0.086,
            0.0864,
            0.0868,
            0.0872,
            0.0876,
            0.088,
            0.0884,
            0.0888,
            0.0892,
            0.0896,
            0.09,
            0.0904,
            0.0908,
            0.0912,
            0.0916,
            0.092,
            0.0924,
            0.0928,
            0.0932,
            0.0936,
            0.094,
            0.0944,
            0.0948,
            0.0952,
            0.0956,
            0.096,
            0.0964,
            0.0968,
            0.0972,
            0.0976,
            0.098,
            0.0984,
            0.0988,
            0.0992,
            0.0996,
            0.1,
            0.1004,
            0.1008,
            0.1012,
            0.1016,
            0.102,
            0.1024,
            0.1028,
            0.1032,
            0.1036,
            0.104,
            0.1044,
            0.1048,
            0.1052,
            0.1056,
            0.106,
            0.1064,
            0.1068,
            0.1072,
            0.1076,
            0.108,
            0.1084,
            0.1088,
            0.1092,
            0.1096,
            0.11,
            0.1104,
            0.1108,
            0.1112,
            0.1116,
            0.112,
            0.1124,
            0.1128,
            0.1132,
            0.1136,
            0.114,
            0.1144,
            0.1148,
            0.1152,
            0.1156,
            0.116,
            0.1164,
            0.1168,
            0.1172,
            0.1176,
            0.118,
            0.1184,
            0.1188,
            0.1192,
            0.1196,
            0.12,
        ]
    )

    y_p_mdof = np.array(
        [
            0,
            6.111379948,
            12.23563215,
            18.33303255,
            24.40057071,
            30.49105054,
            36.5696616,
            42.62723414,
            48.66819732,
            54.6994717,
            60.70306381,
            66.67482131,
            72.61405215,
            78.51487384,
            84.37936255,
            90.20094374,
            95.97338891,
            101.6942758,
            107.369141,
            112.99314,
            118.5593523,
            124.0636255,
            129.5018072,
            134.8815102,
            140.2086169,
            145.4744765,
            150.6808193,
            155.8120739,
            160.8751609,
            165.8770009,
            170.8214002,
            175.7221999,
            180.5752477,
            185.3829658,
            190.14397,
            194.8617208,
            199.5265291,
            204.1432396,
            208.71116,
            213.2354808,
            217.7217386,
            222.1720094,
            226.5921757,
            230.9801614,
            235.3394267,
            239.6730859,
            243.9787169,
            248.2566655,
            252.5090081,
            256.7381667,
            260.9444875,
            265.1297006,
            269.294152,
            273.4388797,
            277.566306,
            281.6747008,
            285.7651021,
            289.8371639,
            293.8957305,
            297.9425323,
            301.9696104,
            305.978695,
            309.9722083,
            313.9553408,
            317.9263623,
            321.8842347,
            325.8293041,
            329.7622625,
            333.6851861,
            337.5980748,
            341.4995446,
            345.3892494,
            349.2671893,
            353.1323261,
            356.9836218,
            360.8245367,
            364.6446898,
            368.4510018,
            372.2400124,
            376.0082613,
            379.7522882,
            383.4720931,
            387.1642157,
            390.8321164,
            394.4688745,
            398.0779503,
            401.6558836,
            405.2061346,
            408.7287034,
            412.2305104,
            415.715016,
            419.1787599,
            422.6252025,
            426.0578038,
            429.4731038,
            432.867642,
            436.2483391,
            439.6048143,
            442.9336071,
            446.238178,
            449.5116063,
            452.7504318,
            455.9581147,
            459.1346551,
            462.2765927,
            465.3873877,
            468.4705004,
            471.5224705,
            474.5467584,
            477.5468244,
            480.5226683,
            483.4708299,
            486.3947696,
            489.2944873,
            492.1630624,
            495.0039553,
            497.8171659,
            500.6026942,
            503.35708,
            506.0803232,
            508.7689636,
            511.4195409,
            514.032055,
            516.6099664,
            519.1498145,
            521.6515996,
            524.1118613,
            526.5305995,
            528.9112747,
            531.2538867,
            533.551515,
            535.8041597,
            538.0118207,
            540.1744979,
            542.2887312,
            544.3510603,
            546.3614851,
            548.313085,
            550.2093205,
            552.0501914,
            553.8253169,
            555.5450778,
            557.206014,
            558.8150459,
            560.3721735,
            561.8773969,
            563.3410969,
            564.7632735,
            566.1404663,
            567.4795961,
            568.784123,
            570.0575074,
            571.296289,
            572.503928,
            573.6838847,
            574.8326988,
            575.957291,
            577.0576612,
            578.1372697,
            579.1926562,
            580.227281,
            581.2446044,
            582.2446264,
            583.227347,
            584.1962264,
            585.1478044,
            586.082081,
            587.0025164,
            587.9021902,
            588.7880228,
            589.656554,
            590.511244,
            591.3417121,
            592.1617993,
            592.9611248,
            593.7431489,
            594.5044113,
            595.2518326,
            595.9854127,
            596.7051517,
            597.4075893,
            598.099646,
            598.7744013,
            599.4387758,
            600.0858488,
            600.7190807,
            601.3350112,
            601.93018,
            602.5080474,
            603.0616928,
            603.5945765,
            604.1032381,
            604.5911381,
            605.0582764,
            605.5081133,
            605.944109,
            606.3628034,
            606.7676565,
            607.1552083,
            607.5323792,
            607.8922487,
            608.2313565,
            608.5600835,
            608.871509,
            609.1725537,
            609.4597572,
            609.7331196,
            609.9961012,
            610.2487019,
            610.494382,
            610.726221,
            610.9442189,
            611.1552962,
            611.3490721,
            611.5324671,
            611.6985607,
            611.8473529,
            611.9788437,
            612.0964934,
            612.2003019,
            612.2937295,
            612.3802366,
            612.4563628,
            612.5255685,
            612.5913139,
            612.6466784,
            612.702043,
            612.750487,
            612.7920104,
            612.8300735,
            612.8646763,
            612.8923586,
            612.9165806,
            612.9373423,
            612.9546437,
            612.9650245,
            612.9719451,
            612.9754054,
            612.9719451,
            612.9684848,
            612.9546437,
            612.9373423,
            612.9165806,
            612.8923586,
            612.861216,
            612.8266132,
            612.7885501,
            612.7435664,
            612.6985827,
            612.6501387,
            612.5982345,
            612.5428699,
            612.4875054,
            612.4252203,
            612.3629352,
            612.3006501,
            612.2314444,
            612.1622387,
            612.0895728,
            612.0134465,
            611.9373203,
            611.8577338,
            611.774687,
            611.6881799,
            611.6016728,
            611.5117054,
            611.421738,
            611.3248501,
            611.2279622,
            611.7885281,
            616.4010862,
            607.5981246,
            605.6119218,
            601.9509417,
            600.843651,
            599.1827148,
            599.2173176,
            599.4249347,
            599.8159467,
            600.1481339,
            600.3384495,
            600.3592112,
            600.2727042,
            600.1723559,
            600.0650871,
            599.9612786,
            599.9474375,
            594.3452383,
            594.1376213,
            593.8469574,
            594.4628879,
            591.0891114,
            589.1721142,
            588.1755526,
            588.473137,
            588.8364667,
            588.9817986,
            588.4627561,
            588.3105036,
            588.4454547,
            588.3312653,
        ]
    )

    def sd_meters(self, sd_mm):
        x_adrs_meters_list = []
        for element in sd_mm:
            new_coord = element / 1000
            x_adrs_meters_list.append(new_coord)
        return np.array(x_adrs_meters_list)

    def sa_ms2(self, sa_g):
        y_adrs_meters_list = []
        for element in sa_g:
            new_coord = element * 9.81
            y_adrs_meters_list.append(new_coord)
        return np.array(y_adrs_meters_list)

    def y_k_eff(self, sd_m, k_eff):
        y_k_eff_list = []
        for element in sd_m:
            new_coord = element * k_eff
            y_k_eff_list.append(new_coord)
        return np.array(y_k_eff_list)

    # Generate SDOF pushover curve
    def x_p_sdof(self, Γ):
        x_p_sdof_list = []
        for element in self.x_p_mdof:
            new_coord = element / Γ
            x_p_sdof_list.append(new_coord)
        return np.array(x_p_sdof_list)

    def y_p_sdof(self, Γ):
        y_p_sdof_list = []
        for element in self.y_p_mdof:
            new_coord = element / Γ
            y_p_sdof_list.append(new_coord)
        return np.array(y_p_sdof_list)

    ##

    def x_bilinear_line(self, start_graph, end_graph):
        return np.linspace(start_graph, end_graph, 1000)

    def find_intersections(self, curve_1, curve_2):
        intersection = curve_1.intersection(curve_2)
        intersection_coords = []
        if intersection.geom_type == "Point":
            intersection_coords.append((intersection.x, intersection.y))
        if intersection.geom_type == "MultiPoint":
            individual_points = [(pt.x, pt.y) for pt in intersection.geoms]
            for element in individual_points:
                intersection_coords.append(element)
        return intersection_coords

    def find_nearest_coordinate_index(self, curve_coordinates, coord):
        difference_array_x = np.absolute(curve_coordinates - coord)
        # find the index of minimum element from the array
        index = difference_array_x.argmin()
        return index

    def find_nearest_coordinate(self, curve_coordinates, coord):
        """
        Enter array of X or Y coordinates of a curve and X or Y coordinate of
        a point_a to find the nearest X or Y point_a to in the curve array
        """
        index = self.find_nearest_coordinate_index(curve_coordinates, coord)
        return curve_coordinates[index]

    def bilinear_m_q(self, x_1, x_2, y_1, y_2):
        """
        Enter coordinates of two points.
        Returns a tuple with m and q to generate
        one straight line which composes the bilinear line
        """
        m, q = np.polyfit(x=[x_1, x_2], y=[y_1, y_2], deg=1)
        return m, q

    def generate_line(self, x_p_sdof, x_1_array, x_2_array, y_1_array, y_2_array):
        """
        Generate part of the bilinear curve: 1st or 2nd line that compose it
        Return a tuple with X and Y coordinates
        """
        m = self.bilinear_m_q(x_1_array, x_2_array, y_1_array, y_2_array)[0]
        q = self.bilinear_m_q(x_1_array, x_2_array, y_1_array, y_2_array)[1]
        x = self.x_bilinear_line(x_p_sdof[0], x_p_sdof[-1])
        y = m * x + q
        return x, y

    def interpolate_curve(self, x_coords, y_coords):
        curve = LineString(np.column_stack((x_coords, y_coords)))
        return curve

    def find_range_pushover(self, pushover_coord, line_1_coord, line_2_coord):
        index_0 = self.find_nearest_coordinate_index(pushover_coord, line_1_coord)
        index_1 = self.find_nearest_coordinate_index(pushover_coord, line_2_coord)
        list_fitting = [pushover_coord[index_0 : index_1 + 1]]
        return list_fitting

    def bilinear_line(
        self,
        x_p_sdof,
        x_bilinear_coord_0,
        x_bilinear_coord_1,
        y_bilinear_coord_0,
        y_bilinear_coord_1,
    ):
        x_bilinear_line = self.generate_line(
            x_p_sdof,
            x_bilinear_coord_0,
            x_bilinear_coord_1,
            y_bilinear_coord_0,
            y_bilinear_coord_1,
        )[0]
        y_bilinear_line = self.generate_line(
            x_p_sdof,
            x_bilinear_coord_0,
            x_bilinear_coord_1,
            y_bilinear_coord_0,
            y_bilinear_coord_1,
        )[1]
        bilinear_line = self.interpolate_curve(x_bilinear_line, y_bilinear_line)
        return bilinear_line
